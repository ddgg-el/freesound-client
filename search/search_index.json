{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#freesound-client-documentation","title":"Freesound Client Documentation","text":"<p>This Library is a wrapper around the freesound API, an application interface that allows you to browse, search and retrieve information stored in the Freesound.org Database. For more information visit the developer page</p> <p>https://freesound.org/help/developers/</p> <p>DISCLAIMER The official python library is the freesound-python. This implementation has been developed for teaching purpose. Read the Motivation Page for more insights</p> <p>The Freesound API is very well documented and it is a useful resource to make the best use out of this library.</p>"},{"location":"#index","title":"Index","text":"<p>The documentation is organised in 5 sections:</p> <ol> <li> <p>Tutorials</p> <ul> <li>the FreeSound Client tutorial that helps you to get started with this library</li> <li>the Freesound API tutorial for those who are not familar with the Freesound API</li> </ul> </li> <li> <p>How-To</p> </li> <li> <p>Reference</p> </li> <li> <p>Motivations</p> </li> </ol> <p>plus an Appendix to keep track of the Missing Features and to provide a list of Query Examples as well as a indeces file for each feature of the Freesound API: fields - descriptors filters</p> <p>There are two tutorials available</p>"},{"location":"#before-you-start","title":"Before you start","text":""},{"location":"#dependencies","title":"Dependencies","text":"<p>This software depends on the <code>requests</code> library which can be installed globally or locally (in a virtual environment) via <code>pip</code> <pre><code>pip install requests\n</code></pre> or <pre><code>pip3 install requests\n</code></pre></p>"},{"location":"#the-api-credentials","title":"The API Credentials","text":"<p>In order to use this software you need an account on freesound.org and apply for an API key following this link https://freesound.org/apiv2/apply/. The form is quite straight forward in the Create new API credentials you must give a name and a description to your key, accept the terms of use  and click on Request new access crediantials</p>"},{"location":"#basic-set-up","title":"Basic set up","text":"<p>create a new file and create two constants where you insert your API Credentials: <pre><code>API_KEY=&lt;your-api-key&gt;\nUSER_ID=&lt;your-user-id&gt;\n</code></pre></p> <p>Note: you can use an <code>.env</code> file to save your credentials in a safer place</p> <p>then create an instance of the <code>FreeSoundClient</code> as follows</p> <p><pre><code>from freesound import *\n\nAPI_KEY=&lt;your-api-key&gt;\nUSER_ID=&lt;your-user-id&gt;\n\nc = FreeSoundClient(USER_ID,API_KEY) # The API Client\n</code></pre> Now you are ready to make requests to the freesound.org Database!</p> <p>Please follow the Tutorial or the How To sections to learn how to get started with the Freesound Client Library</p> <p></p>"},{"location":"how-to-guide/","title":"How To","text":"<p>This section provides you with the tools that will help you take full advantage of this library</p> <p>All the examples presented in this page can be copied and tested in a file (or in a Jupyter Notebook) containing the following basic instructions:</p> Code <pre><code>from freesound import *\n\nAPI_KEY = \"&lt;your-api-key&gt;\"\nUSER_ID = \"&lt;your-user-id&gt;\"\n\nc = FreeSoundClient(USER_ID,API_KEY)\n</code></pre> <p>INFO you can find the source code of the code showed in these guides on GitHub</p>","boost":2},{"location":"how-to-guide/#filter-by-audio-feature","title":"Filter by Audio Feature","text":"<p>The <code>filters</code> parameter of the <code>FreeSoundClient.search()</code> method allows you to request information about sound files that only holds certain values for specific <code>fields</code>, i.e. it allows you to filter out those files which do not comply with specific attributes.</p> <p>The Freesound API includes <code>filters</code> based on the [Audio Commons Initiative][http://www.audiocommons.org/] project, which aimed at promoting the use of open audio content and at developing technologies with which to support an envisioned ecosystem of content repositories, production tools and users.</p> <p>A list of all the Audio Common filters can be found in the Appendix Lists of this Documentation These filters are all prefixed with the label <code>ac_</code> and can be used as regular filters, i.e. by specifying them in the search's <code>filter</code> attribute either with a string or with the <code>FreeSoundFilter</code> utility.</p>","boost":2},{"location":"how-to-guide/#ranges-and-conditions-in-filters","title":"Ranges and Conditions in Filters","text":"<p>Filters can be a double-edge sword when you want to narrow down your searches. Let's consider a simple scenario:</p> Code <pre><code>filters = FreeSoundFilters(duration=1).aslist\nresult = c.search(\"piano\",fields=Field.duration,filter=filters)\n</code></pre> <p>This query will filter out those sound whose duration is 1 second, or rather EXACTLY 1 second, no more, no less. </p> <p>Still, by the time of writing this article, this query will produce 51 results.</p> <p>Because of this the Freesound API allows filtering by range, a feature that this library implements with the <code>Filter</code> class and its 3 <code>classmethods</code>:</p> <ul> <li><code>Filter.RANGE(minimum,maximum)</code> to add filters in a range between 2 values ()</li> <li><code>Filter.AT_LEAST(minimum)</code> to specify only a minimum limit and can be interpreted as <code>greater than</code></li> <li><code>Filter.UP_TO(maximum)</code> to specify only a maximum limit and can be interpreted as <code>lower than</code></li> </ul> <p>Substituting a range to the previous example means:</p> Code <pre><code>filters = FreeSoundFilters(duration=Filter.RANGE(0.8, 1.2)).aslist\nresult = c.search(\"piano\",fields=Field.duration,filter=filters)\n</code></pre> <p>Your search will include those files which are approximately 1 second long, giving you a wider choice of sounds.</p> <p>For filters such as <code>created</code> it might be especially useful the use of ranges of time frames, and the best way to format a time range is the Python built in's library <code>datetime</code>. The class <code>Filter</code> will automatically understand that you are using a <code>datetime</code> object, and it will automatically format the date in <code>isoformat</code> for you. </p> <p>If you are not familiar with the <code>datetime</code> library, this article might help. </p> Code <pre><code>filters = FreeSoundFilters(created=Filter.RANGE((datetime.now()-timedelta(weeks=20)),datetime.now())).aslist\nresult = c.search(\"music\",fields=Field.duration,filter=filters)\n</code></pre> <p>This query will filter out only those files which are created in the last 20 weeks.</p> <p>The <code>Filter</code> class also provides 2 conditionals statements:</p> <ul> <li><code>Filter.OR</code></li> <li><code>Filter.AND</code></li> </ul> <p>This feature allows you to build queries such as:</p> Code <pre><code>filters = FreeSoundFilters(type=Filter.OR('wav','aiff'), duration=Filter.UP_TO(1),created=Filter.RANGE((datetime.now()-timedelta(weeks=20)),datetime.now())).aslist\n</code></pre> <p>which will exclude <code>mp3</code> files, <code>ogg</code> files etc. for the search results.</p>","boost":2},{"location":"how-to-guide/#sorting-freesoundsort","title":"Sorting (<code>FreeSoundSort</code>)","text":"<p>Another utility that can help you formulate your queries is the <code>FreeSoundSort</code> class. The <code>sort</code> attribute of the <code>FreeSoundClient.search()</code> method aspects 9 possible values:</p> <ul> <li>score</li> <li>duration_desc</li> <li>duration_asc</li> <li>created_desc</li> <li>created_asc</li> <li>downloads_desc</li> <li>downloads_asc</li> <li>rating_desc</li> <li>rating_asc</li> </ul> <p>if you do forget these values you can always start typing <code>FreeSoundSort.</code> and your IDE will suggest you possible valid values that you can use in your queries:</p> click to enlarge <p>This example shows how to use it in context:</p> Code <pre><code>c.search(query=\"piano\", sort_by=FreeSoundSort.created_asc)\n</code></pre>","boost":2},{"location":"how-to-guide/#download-a-lot-of-files-at-once","title":"Download a lot of files at once","text":"<p>Another important parameter of the <code>FreesuondClient.search()</code> method is <code>page_size</code> which by default is set to 15 and states the max number of items that will be downloaded in one <code>page</code> of the response. When you need to gather a lot of data from the Freesound Database you can hence reduce the number of requests by using a higher <code>page_size</code> value (up to 150).</p> <p>This parameter works well in coordination with <code>FreeSoundClient.download_results()</code> a method that you might have already seen in the <code>Tutorial</code>. This method allows you to download sound files from a query response and deals with pagination automatically.</p> <p>It accepts 2 parameters: </p> <ul> <li><code>output_folder_path</code>, which defines the folder in which the files will be downloaded </li> <li><code>files_count</code> the number of files that you want to download</li> </ul> Code <pre><code>c.download_results(output_folder_path=\"sound_lib\", files_count=100)\n</code></pre> <p>So if you want to download 100 files from the Freesound Database the best approach would be to set both <code>search(...,page_size=100)</code> and <code>download_results(files_count=100)</code>:</p> Code <pre><code>filters = FreeSoundFilters(type=\"wav\", samplerate=48000).aslist\nc.search(query=\"piano\", fields=Field.download, filter=filters, page_size=100)\nc.download_results(output_folder=\"tutorials/sound_lib\",files_count=100)\n</code></pre> <p>With this approach you will limit the requests to the minimum because the search results are not paginated and <code>download_results</code> will find all the download links in one page</p> <p>NOTE: Remember that if you want to download files from the Freesound Database, you MUST include the field <code>download</code> in the <code>search</code> request</p> <p>There are different scenarios that we would like to summarize:</p> <ul> <li><code>download_results</code> will never overwrite an existing sound file. If the sound file already exists in the destination download folder the client will just skip it, i.e. it will not make a request to the server</li> <li>if <code>page_size</code> is smaller than <code>files_count</code> the client will take care of pagination for you</li> <li>if <code>files_count</code> is bigger than the actual length of resulting the sound list, i.e. fewer files than <code>files_count</code> are found in the Database with your query, this value will be set to the length of the response list.</li> </ul>","boost":2},{"location":"how-to-guide/#access-the-search-results-data","title":"Access the search results data","text":"<p>The <code>search</code> method actually returns the results list, which means that you can assign the response from the Database to a variable and manipulate the resulting <code>dictionary</code> as you need. The following is a simple demonstration of this feature:</p> Code <pre><code>result = c.search(\"piano\",page_size=3)\nprint(result['results'][0])\n</code></pre> Output <pre><code>{\n\"id\": 148471,\n\"name\": \"PIANO_LOUD_AB6.wav\"\n}\n</code></pre> <p>This response is a <code>dictionary</code> containing the following keys:</p> <ul> <li><code>count</code>: the total count of the files found</li> <li><code>previous</code>: the url of the previous page (for pagination)</li> <li><code>next</code>: the url of the next page (for pagination)</li> <li><code>results</code>: a <code>list</code> of sounds and their features matching the <code>search</code> request</li> </ul> <p>You can use the variable <code>result</code> as you would do with a regular <code>dict</code>, for example <code>result['results'][0]</code> will return the data about the first sound instance in the list. Another example could be:</p> Code <pre><code># store the id of only those sounds that have a `pitch_centroid` lower than 0.4\nresult = c.search(query=\"piano detuned\", fields=Field.analysis, descriptors=Descriptor.sfx_pitch_centroid, page_size=100)\nresults_list = result['results']\n\nids:list[int] = []\n\nfor i,snd in enumerate(results_list):\n    centroid = snd['analysis']['sfx']['pitch_centroid']\n    mean = centroid['mean']\n    if mean &lt;= 0.4:\n        ids.append(snd['id'])\n\nprint(ids)\n</code></pre>","boost":2},{"location":"how-to-guide/#handle-pagination-manually","title":"Handle pagination manually","text":"<p>There are no limitation about the number of <code>search</code> calls that you can perform in your program, and even though it is always better to optimize your searches via the <code>fields</code> and <code>filter</code> attributes, there might be scenarios in which you need to perform multiple searches.</p> <p>Let's consider this possible scenario: you are looking for as many uncompressed recordings as possible of a single notes played by a prepared piano sampled at 44100, files that you might eventually want to download. You then want to retrieve the loudness of each sound sample and store all this data in a <code>json</code> file.</p> <p>You could formulate your requests as follows:</p> Code <pre><code>fields = FreeSoundFields([Field.download, Field.analysis]).aslist\nfilters = FreeSoundFilters(type=\"wav\", samplerate=44100, tag=[\"prepared\"], ac_single_event=True).aslist\nc.search(query=\"piano\", fields=fields, filter=filters, descriptors=Descriptor.lowlevel_average_loudness, page_size=15)\n</code></pre> <p>By the time of writing this tutorial this search produces 151 results. </p> <p>In the FreeSound API Tutorial we describe how to save the analysis data in a <code>json</code> file using the <code>FreeSoundClient.write_results_list</code> method.</p> <p>Behind the scenes this method save sound data from the client's attribute <code>results_list</code>, which keeps track each <code>search</code> performed by the client. However, this attribute does not deal with pagination, i.e. if your page size is set to <code>15</code>, <code>results_list</code> will store only the first <code>15</code> results.</p> <p>So the first thing would be to increment the <code>page_size</code> to the highest possible value which is <code>150</code>. How do you handle the 151th file? You need to access the <code>next</code> page.</p> <p><code>results_list</code> does not store information about pagination, but the return value of <code>search</code> does. You can update your script as follows:</p> Code <pre><code>fields = FreeSoundFields([Field.download, Field.analysis]).aslist\nfilters = FreeSoundFilters(type=\"wav\", samplerate=44100, tag=[\"prepared\"], ac_single_event=True).aslist\nresult = c.search(query=\"piano\", fields=fields, filter=filters, descriptors=Descriptor.lowlevel_average_loudness, page_size=150)\n</code></pre> <p>From <code>result</code> you can access the <code>next</code> keyword and get the url of the second page of your query. <code>print(result['next'])</code> will output:</p> Output <pre><code>https://freesound.org/apiv2/search/text/?&amp;query=piano&amp;filter=type:wav%20samplerate:44100%20tag:prepared%20ac_single_event:True&amp;weights=&amp;page=2&amp;page_size=150&amp;fields=id,name,download,analysis&amp;descriptors=lowlevel.average_loudness\n</code></pre> <p>Once you have this value, you can call the <code>FreeSoundClient.get_next_page()</code> method passing the url to it, which will update the client <code>results_list</code> with the results from the second page.</p> <p>At this point you can store all your data in a <code>json</code> file at once calling <code>write_results_list</code>.</p> Code <pre><code>c = FreeSoundClient(USER_ID,API_KEY)\n\nfields = FreeSoundFields([Field.download, Field.analysis]).aslist\nfilters = FreeSoundFilters(type=\"wav\", samplerate=44100, tag=[\"prepared\"], ac_single_event=True).aslist\nresult = c.search(query=\"piano\", fields=fields, filter=filters, descriptors=Descriptor.lowlevel_average_loudness, page_size=150)\nprint(c.results_list['count']) #\u00a0150\n\nc.get_next_page(result['next'])\nprint(c.results_list['count']) # 151\n</code></pre> <p>NOTICE: If you just only wanted to download the 151 files you could have call <code>c.download_list()</code> directly as this method handles pagination automatically</p>","boost":2},{"location":"how-to-guide/#load-a-result-list","title":"Load a result list","text":"<p>If you want to recover your data from a previous session or import it in another script, you can use the <code>FreeSoundClient.load_results_list()</code> method that load a <code>json</code> file saved by <code>write_results_list</code>. It usage is pretty straight forward:</p> Code <pre><code>c = FreeSoundClient(USER_ID,API_KEY)\nc.load_results_list(\"tutorials/records/240301T2042_results_list.json\")\nc.dump_results()\n</code></pre> <p>this method checks that the file is properly formatted, i.e. it can find the <code>results</code>, the <code>timestamp</code> and the <code>count</code> keywords. It is not advice to write such file by hand.</p>","boost":2},{"location":"how-to-guide/#working-with-specific-sound-instances","title":"Working with specific sound instances","text":"<p>Another useful public method of the <code>FreeSoundClient</code> is <code>get_track_info</code> which is allows you to retrieve information about a sound given its <code>id</code>.</p> <p>This function implements this request of the Freesound API. </p> Code <pre><code>result = c.get_track_info(382353)\nprint(result)\n</code></pre> Output <pre><code>&lt;freesound.freesound_track.FreeSoundTrack Cymbale-longue-02.wav&gt;\n</code></pre> <p>The result of this call is a <code>FreeSoundSoundInstance</code> another utility class which basically represent a Sound Instance as described here. You can access all its fields as attributes, i.e. <code>result.download</code> will return its download url (or None), or you can create a <code>dictionary</code> out of it with the method <code>as_dict()</code></p> Code <pre><code>print(result.as_dict())\n</code></pre> Output <pre><code>{\n\"id\": 382353,\n\"name\": \"Cymbale-longue-02.wav\",\n\"url\": \"https://freesound.org/people/lomographicmusic/sounds/382353/\",\n\"tags\": [\n    \"prepared\",\n    \"detuned\",\n    \"piano\"\n],\n\"description\": \"A cymbal flippantly thrown into the piano, recorded with Tascam DP008. \\r\\n\\r\\nUne cymbale jet\\u00e9e n\\u00e9gligemment dans le piano, frapp\\u00e9e par les marteaux et capt\\u00e9e par le brave Tascam DP008 !\",\n\"created\": \"2017-02-28T20:16:07\",\n\"license\": \"https://creativecommons.org/licenses/by/4.0/\",\n\"type\": \"wav\",\n\"channels\": 2,\n\"filesize\": 493772,\n\"bitrate\": 0,\n\"bitdepth\": 16,\n\"duration\": 2.79891,\n\"samplerate\": 44100.0,\n\"username\": \"lomographicmusic\",\n\"pack\": \"https://freesound.org/apiv2/packs/21508/\",\n\"download\": \"https://freesound.org/apiv2/sounds/382353/download/\",\n\"bookmark\": \"https://freesound.org/apiv2/sounds/382353/bookmark/\",\n\"previews\": {\n    \"preview-hq-mp3\": \"https://cdn.freesound.org/previews/382/382353_7119516-hq.mp3\",\n    \"preview-hq-ogg\": \"https://cdn.freesound.org/previews/382/382353_7119516-hq.ogg\",\n    \"preview-lq-mp3\": \"https://cdn.freesound.org/previews/382/382353_7119516-lq.mp3\",\n    \"preview-lq-ogg\": \"https://cdn.freesound.org/previews/382/382353_7119516-lq.ogg\"\n},\n\"images\": {\n    \"waveform_m\": \"https://cdn.freesound.org/displays/382/382353_7119516_wave_M.png\",\n    \"waveform_l\": \"https://cdn.freesound.org/displays/382/382353_7119516_wave_L.png\",\n    \"spectral_m\": \"https://cdn.freesound.org/displays/382/382353_7119516_spec_M.jpg\",\n    \"spectral_l\": \"https://cdn.freesound.org/displays/382/382353_7119516_spec_L.jpg\",\n    \"waveform_bw_m\": \"https://cdn.freesound.org/displays/382/382353_7119516_wave_bw_M.png\",\n    \"waveform_bw_l\": \"https://cdn.freesound.org/displays/382/382353_7119516_wave_bw_L.png\",\n    \"spectral_bw_m\": \"https://cdn.freesound.org/displays/382/382353_7119516_spec_bw_M.jpg\",\n    \"spectral_bw_l\": \"https://cdn.freesound.org/displays/382/382353_7119516_spec_bw_L.jpg\"\n},\n\"num_downloads\": 31,\n\"avg_rating\": 3.0,\n\"num_ratings\": 1,\n\"rate\": \"https://freesound.org/apiv2/sounds/382353/rate/\",\n\"comments\": \"https://freesound.org/apiv2/sounds/382353/comments/\",\n\"num_comments\": 0,\n\"comment\": \"https://freesound.org/apiv2/sounds/382353/comment/\",\n\"similar_sounds\": \"https://freesound.org/apiv2/sounds/382353/similar/\",\n\"analysis\": \"No descriptors specified. You should indicate which descriptors you want with the 'descriptors' request parameter.\",\n\"analysis_stats\": \"https://freesound.org/apiv2/sounds/382353/analysis/\",\n\"analysis_frames\": \"https://freesound.org/data/analysis/382/382353-fs-essentia-extractor_legacy_frames.json\",\n\"is_explicit\": false\n}\n</code></pre> <p>You can create a <code>dict</code> from a <code>FreeSoundSoundInstance</code>, and you can also create a <code>FreeSoundSoundInstance</code> from a <code>dict</code>. This MUST contain at least the fields <code>id</code> and <code>name</code>. If it contains non-valid fields, the program will raise a <code>DataError</code> exception.</p> Code <pre><code># notice 'tegs' instead of 'tags'\nt = FreeSoundSoundInstance({'id': 524545, 'name': 'Piano12 B Flat', 'tegs': ['note', 'synthesizer', 'Piano'], 'type': 'mp3', 'download': 'https://freesound.org/apiv2/sounds/524545/download/'})\nprint(t.name)\n</code></pre> Output <pre><code>freesound.freesound_errors.DataError: Could not create a FreeSoundTrack 'tegs' is not a valid field\n</code></pre> <p>One important thing to notice is that the <code>name</code> attribute in a <code>FreeSoundSoundInstance</code> is manipulated. Spaces will be replaced by <code>-</code> and the extension will be added to it. The original name of the last examples is <code>'Piano12 B Flat'</code>, but <code>t.name</code> will become</p> Output <pre><code>Piano12-B-Flat.mp3\n</code></pre>","boost":2},{"location":"how-to-guide/#download-one-sound","title":"Download one sound","text":"<p>There are simple scenarios in which you might already have a <code>FreeSoundSoundInstance</code> or a valid download link. In these cases you might find the <code>FreeSoundClient.download_track()</code> method more suitable (or just simpler) than <code>download_list</code>. Given a download url and a file name, this function will just download that file locally. For example:</p> Code <pre><code>result = c.get_track_info(382353)\nc.download_track(result.download, result.name)\n</code></pre> <p>You can specify an output folder using the <code>outfolder</code> parameter, but if you don't the program will prompt you to specify one. If the file already exists you will be prompted to choose how to handle the situation. Setting the <code>skip</code> attribute to <code>True</code> defaults to not downloading the file if it already exists.</p> Code <pre><code>result = c.get_track_info(382353)\nc.download_track(result.download, result.name,outfolder='tutorials/sound_lib', skip=True)\n</code></pre> <p></p>","boost":2},{"location":"api/api-client/","title":"FreeSoundClient","text":""},{"location":"api/api-client/#the-freesoundclient","title":"The FreeSoundClient","text":""},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient","title":"<code>freesound.freesound_api.FreeSoundClient</code>","text":"<p>The core class of the library</p> <p>The <code>FreeSoundClient</code> is a wrapper around the <code>freeesound_api</code>. It facilitates the formulation of queries to make requests to the Freesound Database. It handles bulk files download and can write <code>json</code> files from the queries.</p> <p>Check the Tutorial and How-To sections of this documentation for a detailed explanation of its usage.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>the User id</p> required <code>api_key</code> <code>str</code> <p>the API key</p> required <code>download_folder</code> <code>str | None</code> <p>the path where sound files should be downloaded.</p> <code>None</code> <code>token_file_path</code> <code>str</code> <p>the Path to a <code>json</code> file containing the user's access token.</p> <code>'access_token.json'</code> Usage <pre><code>&gt;&gt;&gt; c = FreesoundClient('&lt;your-user-id&gt;','&lt;your-api-key&gt;', 'sound_lib', 'access_token.json')\n</code></pre>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.username","title":"<code>username: str</code>  <code>property</code>","text":"<p>read-only</p> <p>Returns:</p> Type Description <code>str</code> <p>the username associated with this <code>FreeSoundClient</code> identified by <code>user_id</code></p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.page_size","title":"<code>page_size: int</code>  <code>property</code>","text":"<p>read-only</p> <p>Returns:</p> Type Description <code>int</code> <p>the maximum count of items that should be returned by the search result specified in the <code>search</code> function.</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.results_list","title":"<code>results_list: dict[str, Any]</code>  <code>property</code>","text":"<p>read-only</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a <code>json</code> object containing the response of a <code>search</code> request.</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.download_count","title":"<code>download_count: int</code>  <code>property</code>","text":"<p>read-only</p> <p>Returns:</p> Type Description <code>int</code> <p>how many files have been downloaded</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.download_list","title":"<code>download_list: dict[str, list[dict[str, Any]]]</code>  <code>property</code>","text":"<p>read-only</p> <p>Returns:</p> Type Description <code>dict[str, list[dict[str, Any]]]</code> <p>a detailed list of the downloaded files in <code>json</code> format</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.download_folder","title":"<code>download_folder: str | None</code>  <code>property</code> <code>writable</code>","text":"<p>Returns:</p> Type Description <code>str | None</code> <p>the name of the folder where audio files should be downladed</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.search","title":"<code>search(query, filter='', fields='', descriptors='', sort_by='score', page_size=15, normalized=0)</code>","text":"<p>wrapper around the <code>search()</code> function </p> <p>see: https://freesound.org/docs/api/resources_apiv2.html#search-resources for details</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>a string of space-separated word to search into the Freesound Database</p> required <code>filter</code> <code>str</code> <p>a string of valid filter:value string (see: <code>FreeSoundFilters</code> for help)</p> <code>''</code> <code>fields</code> <code>str</code> <p>a coma-separated string of valid <code>fields</code> (see: <code>FreeSoundFields</code> for help)</p> <code>''</code> <code>descriptors</code> <code>str</code> <p>a coma-separated string of valid <code>descriptors</code> (see: <code>FreeSoundDescriptors</code> for help). This attribute must be used in combination with the field <code>analysis</code></p> <code>''</code> <code>sort_by</code> <code>str</code> <p>a string defining how the search results should be organised (see: <code>FreeSoundFilters</code> for help)</p> <code>'score'</code> <code>page_size</code> <code>int</code> <p>the maximum count of items that should be returned by the search result</p> <code>15</code> <code>normalized</code> <code>int</code> <p>whether the sound <code>descriptors</code> values should be normalized or not</p> <code>0</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a json object representing the Response from the freesound database https://freesound.org/docs/api/resources_apiv2.html#response</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.get_track_info","title":"<code>get_track_info(track_id, track_name=None, fields=None, descriptors=None)</code>","text":"<p>a wrapper around the <code>get_track_info()</code> function </p> <p>This function queries the database to get the infos of a sound identified by <code>id</code>. Check the documentation for more help: https://freesound.org/docs/api/resources_apiv2.html#sound-instance</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>Any</code> <p>the <code>id</code> of the sound</p> required <code>track_name</code> <code>str | None</code> <p>the name of the sound track with the provided <code>id</code></p> <code>None</code> <code>fields</code> <code>str | None</code> <p>a coma-separated string of valid <code>fields</code> (see: <code>FreeSoundFields</code> for help)</p> <code>None</code> <code>descriptors</code> <code>str | None</code> <p>a coma-separated string of valid <code>descriptors</code> (see: <code>FreeSoundDescriptors</code> for help). This attribute must be used in combination with the field <code>analysis</code></p> <code>None</code> <p>Returns:</p> Type Description <code>FreeSoundSoundInstance</code> <p>an instance of a sound with default or specified <code>fields</code></p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.download_track","title":"<code>download_track(url, filename, outfolder=None, skip=False)</code>","text":"<p>a wrapper around the <code>download_track()</code> function </p> <p>Downloads a track given a valid download <code>url</code> retrieved from the Freesound Database</p> <p>See: https://freesound.org/docs/api/resources_apiv2.html#download-sound-oauth2-required for details</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>the download link for a specific sound</p> required <code>filename</code> <code>str</code> <p>the name of the file to download</p> required <code>outfolder</code> <code>str</code> <p>the folder where the file should be downloaded</p> <code>None</code> <code>skip</code> <code>bool</code> <p>deafult value to skip a file if it already exists.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the file has been downloaded, <code>False</code> otherwise</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.get_next_page","title":"<code>get_next_page(url)</code>","text":"<p>a wrapper around the <code>get_next_page()</code> function </p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>a url retrieved from a previous 'search' request</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a json object representing the Response from the freesound database https://freesound.org/docs/api/resources_apiv2.html#response</p>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.download_results","title":"<code>download_results(output_folder=None, files_count=None)</code>","text":"<p>download <code>files_count</code> audio files into <code>output_folder_path</code></p> <p>This function takes care of pagination automatically</p> <p>Parameters:</p> Name Type Description Default <code>output_folder</code> <code>str | None</code> <p>The name of the output folder.</p> <code>None</code> <code>files_count</code> <code>int | None</code> <p>how many files should be downloaded.</p> <code>None</code>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.write_download_list","title":"<code>write_download_list(filename='downloads.json', folder=None)</code>","text":"<p>save a detailed list of the downloaded files in a <code>json</code> file</p> <p>If <code>folder</code> is not provided the client will prompt the user for this information</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>the name of the file to save</p> <code>'downloads.json'</code> <code>folder</code> <code>str | None</code> <p>the name of the folder where to save the file</p> <code>None</code>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.write_results_list","title":"<code>write_results_list(filename='results_list.json', folder=None)</code>","text":"<p>save a simplified list of the <code>search</code> response in a <code>json</code> file</p> <p>If <code>folder</code> is not provided the client will prompt the user for this information</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>the file of the files where the list should be saved</p> <code>'results_list.json'</code> <code>folder</code> <code>str | None</code> <p>the name of the folder where to save the file</p> <code>None</code>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.load_results_list","title":"<code>load_results_list(json_file)</code>","text":"<p>load a json file produced from <code>write_results_list</code></p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>str</code> <p>a relative or an absolute path to a json file</p> required"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.dump_results","title":"<code>dump_results(data=None)</code>","text":"<p>pretty print the result of a <code>search</code></p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any] | None</code> <p>a <code>dict</code> (for example the result of a <code>search</code>). By default it will print the result of the last performed search.</p> <code>None</code>"},{"location":"api/api-client/#freesound.freesound_api.FreeSoundClient.logout","title":"<code>logout()</code>","text":"<p>Closes the program</p> <p>Should not normally need to be called explicitly</p> <p>Calls <code>sys.exit(0)</code></p>"},{"location":"api/api-fs-api/","title":"freesound-api","text":"<p>The <code>freesound_api</code> module implements the structure around which the <code>FreeSoundClient</code> is built</p> <p>NOTE: you are not supposed to use these functions directly, but you can if you want</p> <ul> <li>get_access_token</li> <li>refresh_access_token</li> <li>get_my_infos</li> <li>search</li> <li>get_track_info</li> <li>get_next_page</li> <li>download_track</li> </ul>"},{"location":"api/api-fs-api/#freesoundapi","title":"FreesoundAPI","text":""},{"location":"api/api-fs-api/#freesound.freesound_api.get_access_token","title":"<code>freesound.freesound_api.get_access_token(user_id, api_key, authorization_code)</code>","text":"<p>A utlity function which covers Step 3 of the OAuth2 Authentication process          see: https://freesound.org/docs/api/authentication.html#step-3</p> <p>You can apply for API credentials here: https://freesound.org/apiv2/apply/</p> <p>You can save the response data in a file for future connections</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>the User id</p> required <code>api_key</code> <code>str</code> <p>the API key</p> required <code>authorization_code</code> <code>str</code> <p>the authorization code copied from the browser see: https://freesound.org/docs/api/authentication.html#step-2</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a <code>dict</code> containing the following keys: <code>\"access_token\"</code>, <code>\"expires_in\"</code>, <code>\"token_type\"</code>, <code>\"scope\"</code>, <code>\"refresh_token\"</code></p>"},{"location":"api/api-fs-api/#freesound.freesound_api.refresh_access_token","title":"<code>freesound.freesound_api.refresh_access_token(user_id, api_key, refresh_token)</code>","text":"<p>Refresh the User \"access token\" when expired</p> <p>see: https://freesound.org/docs/api/authentication.html#once-you-have-your-access-token</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>your the User id</p> required <code>api_key</code> <code>str</code> <p>the API key</p> required <code>refresh_token</code> <code>str</code> <p>the \"refresh_token\" saved from the <code>get_access_token()</code> Response</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a <code>dict</code> containing the following keys: <code>\"access_token\"</code>, <code>\"expires_in\"</code>, <code>\"token_type\"</code>, <code>\"scope\"</code>, <code>\"refresh_token\"</code></p>"},{"location":"api/api-fs-api/#freesound.freesound_api.get_my_infos","title":"<code>freesound.freesound_api.get_my_infos(token)</code>","text":"<p>get the info about the User identified by <code>token</code></p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>a valid OAuth2 access token</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a <code>dict</code> containing data listed here: https://freesound.org/docs/api/resources_apiv2.html#user-instance</p>"},{"location":"api/api-fs-api/#freesound.freesound_api.search","title":"<code>freesound.freesound_api.search(query, token, fields=None, filter=None, descriptors=None, sort_by='score', page_size=15, normalized=0)</code>","text":"<p>Search in the FreeSound Database</p> <p>For a full documentation see: https://freesound.org/docs/api/resources_apiv2.html#search-resources</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>a space-separatad string of words to search in the FreeSound Database</p> required <code>token</code> <code>str</code> <p>a valid OAuth2 access token</p> required <code>fields</code> <code>str | None</code> <p>a coma-separated string of fields of a SoundInstance</p> <code>None</code> <code>filter</code> <code>str | None</code> <p>a space-separated string of valid filter:value</p> <code>None</code> <code>descriptors</code> <code>str | None</code> <p>a coma-separated string of valid sound analysis descriptors</p> <code>None</code> <code>sort_by</code> <code>str</code> <p>a valid sort paramter</p> <code>'score'</code> <code>page_size</code> <code>int</code> <p>the max number of items inside the result array of the response</p> <code>15</code> <code>normalized</code> <code>int</code> <p>wheteher the analysis values are normalized or not either 0-1</p> <code>0</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a sound list. See: https://freesound.org/docs/api/resources_apiv2.html#response-sound-list</p>"},{"location":"api/api-fs-api/#freesound.freesound_api.get_track_info","title":"<code>freesound.freesound_api.get_track_info(track_id, token, fields=None, descriptors=None)</code>","text":"<p>Requests infos of a SoundInstance</p> <p>see: https://freesound.org/docs/api/resources_apiv2.html#sound-instance</p> <p>Parameters:</p> Name Type Description Default <code>track_id</code> <code>str</code> <p>a valid id of a sound in the freesound database</p> required <code>token</code> <code>str</code> <p>a valid OAuth2 access token</p> required <code>fields</code> <code>str | None</code> <p>a coma-separated string of fields of a SoundInstance</p> <code>None</code> <code>descriptors</code> <code>str | None</code> <p>a coma-separated string of valid sound analysis descriptors</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a dict containing all the info of a SoundInstance. see https://freesound.org/docs/api/resources_apiv2.html#sound-resources</p>"},{"location":"api/api-fs-api/#freesound.freesound_api.get_next_page","title":"<code>freesound.freesound_api.get_next_page(url, token)</code>","text":"<p>A utility function to handle pagination in sound results</p> <p>It performs a search form the a url parsed from the <code>'next'</code> field of a search result</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>a url retrieved from a previous 'search' request</p> required <code>token</code> <code>str</code> <p>a valid OAuth2 access token</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>a sound list. See: https://freesound.org/docs/api/resources_apiv2.html#response-sound-list</p>"},{"location":"api/api-fs-api/#freesound.freesound_api.download_track","title":"<code>freesound.freesound_api.download_track(track_url, token)</code>","text":"<p>Download a track from a url</p> <p>Parameters:</p> Name Type Description Default <code>track_url</code> <code>str</code> <p>a valid download url retrieved from a SoundInstance</p> required <code>token</code> <code>str</code> <p>a valid OAuth2 access token</p> required <p>Returns:</p> Type Description <code>Response</code> <p>a <code>requests.Response</code> whose <code>content</code> can be loaded in a <code>ByteIO</code></p>"},{"location":"api/api-reference/","title":"Overview","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>freesound-client</code> project code.</p> <ul> <li>FreeSoundClient</li> <li>FreeSuondUtilities<ul> <li>FreeSoundFields</li> <li>FreeSoundDescriptors</li> <li>FreeSoundFilters</li> <li>FreeSoundSort</li> <li>FreeSoundSoundInstance</li> </ul> </li> <li>freesound_api</li> </ul>"},{"location":"api/api-utilities/","title":"Utilities","text":""},{"location":"api/api-utilities/#api-utlities-overview","title":"API Utlities OverviewFreeSoundFieldsFieldFreeSoundDescriptorsDescriptorFreeSoundFiltersFilterFreeSoundSortFreeSoundSoundInstance","text":"<ul> <li>FreeSoundFields<ul> <li>Field</li> </ul> </li> <li>FreeSoundDescriptors<ul> <li>Descriptor</li> </ul> </li> <li>FreeSoundFilters</li> <li>FreeSoundSort</li> <li>FreeSoundSoundInstance</li> </ul>"},{"location":"api/api-utilities/#freesound.freesound_fields.FreeSoundFields","title":"<code>freesound.freesound_fields.FreeSoundFields</code>","text":"<p>             Bases: <code>ListMaker</code></p> <p>A Utility Class that creates a coma-separated string from a list of <code>Field</code> calling the method <code>aslist</code></p> <p>The result is a ready formatted <code>string</code> to be used in the <code>fields</code> parameter of <code>FreeSoundClient</code></p> <p>For more information visit: https://freesound.org/docs/api/resources_apiv2.html#response-sound-instance</p> Usage <pre><code>&gt;&gt;&gt; print(FreeSoundFields([Field.id,Field.filesize]).aslist)\nid,filesize\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_fields.FreeSoundFields.aslist","title":"<code>aslist: str</code>  <code>property</code>","text":"<p>use this property to pass the list of <code>Field</code>to a <code>FreeSoundClient</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a coma-separated string of valid fields</p>"},{"location":"api/api-utilities/#freesound.freesound_fields.Field","title":"<code>freesound.freesound_fields.Field</code>","text":"<p>Field is a class that provides hints for valid <code>fields</code> to query the <code>freesound.org</code> database</p>"},{"location":"api/api-utilities/#freesound.freesound_descriptors.FreeSoundDescriptors","title":"<code>freesound.freesound_descriptors.FreeSoundDescriptors</code>","text":"<p>             Bases: <code>ListMaker</code></p> <p>A Utility Class that creates a coma-separated string from a list of <code>Descriptor</code> calling the method <code>aslist</code></p> <p>The result is a ready formatted <code>string</code> to be used in the <code>descriptors</code> parameter of the <code>FreeSoundClient</code>.  Don't forget to use this parameter in combination with the field <code>analysis</code></p> <p>Parameters:</p> Name Type Description Default <code>fields</code> <code>list[Any]</code> <p>a <code>list</code> of <code>Descriptor</code></p> required Usage <pre><code>&gt;&gt;&gt; print(FreeSoundDescriptors([Descriptor.low_level_average_loudness,Descriptor.low_level_mfcc]).aslist)\nlowlevel.average_loudness,lowlevel.mfcc\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_descriptors.FreeSoundDescriptors.aslist","title":"<code>aslist: str</code>  <code>property</code>","text":"<p>use this method to pass the list of <code>Descriptor</code> to a <code>FreeSoundClient</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a coma-separated string of valid sound descriptors</p>"},{"location":"api/api-utilities/#freesound.freesound_descriptors.Descriptor","title":"<code>freesound.freesound_descriptors.Descriptor</code>","text":"<p>A list of valid descriptors for FreeSound Analysis</p> <p>This should not be used outside a <code>FreeSoundDescriptors</code></p> Usage <pre><code>&gt;&gt;&gt; FreeSoundDescriptors([Descriptor.lowlevel.spectral_complexity])\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_filters.FreeSoundFilters","title":"<code>freesound.freesound_filters.FreeSoundFilters</code>","text":"<p>             Bases: <code>ListMaker</code></p> <p>A Utility Class that creates a space-separated <code>string</code> of <code>filter:value</code> calling the method <code>aslist</code></p> <p>It makes use of <code>TypeFilter</code> (a <code>TypeDict</code>) to provide type annotation for valid <code>filters</code> to query the <code>freesound.org</code> database The result is a ready formatted string to be used as a <code>filter</code> parameter in the <code>FreeSoundClient</code> including <code>ac_filter</code></p> <p>For more information visit: https://freesound.org/docs/api/resources_apiv2.html#text-search Check the audio common project at: http://www.audiocommons.org/</p> Usage <pre><code>&gt;&gt;&gt; print(FreeSoundFilters(tag=['fret','plucked'], type=\"wav\", samplerate=44100).aslist)\ntag:fret tag:plucked type:wav samplerate:44100\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_filters.FreeSoundFilters.aslist","title":"<code>aslist: str</code>  <code>property</code>","text":"<p>use this property to pass the list of filters to a <code>FreeSoundClient</code>.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a space-separated string of valid filter:value</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter","title":"<code>freesound.filter_types.Filter</code>","text":"<p>A utility class that allows you to create conditional and range filters</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter.OR","title":"<code>OR(val1, val2)</code>  <code>classmethod</code>","text":"<p>conditional OR</p> <p>you should not use this class method outside the <code>FreeSoundFilters</code> class parameters.</p> Usage <pre><code>&gt;&gt;&gt; FreeSoundFilters(type=Filter.OR('wav','aiff')).aslist\n'type:(wav OR aiff)'\n</code></pre> <p>Args:         val1 (Any): first value         val2 (Any): second value</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a well-formatted string for the filter url parameter</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter.AND","title":"<code>AND(val1, val2)</code>  <code>classmethod</code>","text":"<p>conditional AND</p> <p>you should not use this class method outside the <code>FreeSoundFilters</code> class parameters.</p> Usage <pre><code>&gt;&gt;&gt; FreeSoundFilters(tag=Filter.AND('nature','soundscape')).aslist\n'tag:(nature AND soundscape)'\n</code></pre> <p>Args:         val1 (Any): first value         val2 (Any): second value</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a well-formatted string for the filter url parameter</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter.RANGE","title":"<code>RANGE(minimum, maximum)</code>  <code>classmethod</code>","text":"<p>range from minimum TO maximum</p> <p>you should not use this class method outside the <code>FreeSoundFilters</code> class parameters.</p> Usage <pre><code>&gt;&gt;&gt; FreeSoundFilters(duration=Filter.RANGE(3,5)).aslist\n'duration:[3 TO 5]'\n</code></pre> <p>Args:         minimum (Any): range minimum         maximum (Any): range maximum</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a well-formatted string for the filter url parameter</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter.AT_LEAST","title":"<code>AT_LEAST(minimum)</code>  <code>classmethod</code>","text":"<p>range from a minimum value</p> <p>you should not use this class method outside the <code>FreeSoundFilters</code> class parameters.</p> Usage <pre><code>&gt;&gt;&gt; FreeSoundFilters(duration=Filter.AT_LEAST(3)).aslist\n'duration:[3 TO *]'\n</code></pre> <p>Args:         minimum (Any): the minimum value</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a well-formatted string for the filter url parameter</p>"},{"location":"api/api-utilities/#freesound.filter_types.Filter.UP_TO","title":"<code>UP_TO(maximum)</code>  <code>classmethod</code>","text":"<p>range up to a maximum value</p> <p>you should not use this class method outside the <code>FreeSoundFilters</code> class parameters.</p> Usage <pre><code>&gt;&gt;&gt; FreeSoundFilters(duration=Filter.UP_TO(3)).aslist\n'duration:[* TO 3]'\n</code></pre> <p>Args:         maximum (Any): the maximum value</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>a well-formatted string for the filter url parameter</p>"},{"location":"api/api-utilities/#freesound.freesound_filters.FreeSoundSort","title":"<code>freesound.freesound_filters.FreeSoundSort</code>","text":"<p>A Utility Class that outputs a valid string to be used as a <code>sort</code> parameter in the <code>FreeSoundClient</code>. Useful for linting</p> Usage <pre><code>&gt;&gt;&gt; print(FreeSoundSort.DURATION_DESC)\nduration_desc\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_sound.FreeSoundSoundInstance","title":"<code>freesound.freesound_sound.FreeSoundSoundInstance</code>","text":"<p>             Bases: <code>Field</code></p> <p>A Utility class the stores the details of a SoundInstance request from the <code>freesound.org</code> database.  Notice that the name of the input SoundInstance will be manipulated automatically by calling <code>self._set_file_name</code>. A name such as <code>Piano12 B Flat</code> will be automatically transformed in <code>Piano12-B-Flat.mp3</code></p> <p>for more information visit: https://freesound.org/docs/api/resources_apiv2.html#sound-instance</p> <p>Parameters:</p> Name Type Description Default <code>track_data</code> <code>dict[Any, Any]</code> <p>a dictionary of information about a SoundInstance</p> required <p>Raises:</p> Type Description <code>AttributeError</code> <p>if the passed dictonary does not contain the fields <code>id</code> and <code>name</code> it raises an error</p> <code>DataError</code> <p>if the passed dictonary does not contain a valid <code>field</code> it raises an error</p> Usage <pre><code>&gt;&gt;&gt; t = FreeSoundSoundInstance({'id': 524545, 'name': 'Piano12', 'tags': ['note', 'synthesizer', 'Piano'], 'type': 'mp3', 'download': 'https://freesound.org/apiv2/sounds/524545/download/'})\n&gt;&gt;&gt; print(t.name)\nPiano12.mp3\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_sound.FreeSoundSoundInstance.ensure_value","title":"<code>ensure_value(field)</code>","text":"<p>a utility function which ensure the presence of a field inside the input dictionary</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>which field must be store in this <code>FreeSoundSoundInstance</code></p> required <p>Raises:</p> Type Description <code>FieldError</code> <p>raises an error if <code>field</code> is not store in this <code>FreeSoundSoundInstance</code></p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the value of the <code>field</code></p> Usage <pre><code>&gt;&gt;&gt; t = FreeSoundSoundInstance({'id': 524545, 'name': 'Piano12', 'type': 'mp3'})\n&gt;&gt;&gt; t.ensure_value('download')\nFieldError\n&gt;&gt;&gt; t.ensure_value('type')\nmp3\n</code></pre>"},{"location":"api/api-utilities/#freesound.freesound_sound.FreeSoundSoundInstance.as_dict","title":"<code>as_dict()</code>","text":"<p>a function to generate a dictionary out of <code>self</code></p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: the same <code>dict</code> that you would get from one element of <code>FreeSoundClient.results_list['results']</code></p>"},{"location":"appendix/descriptors-list/","title":"Descriptors","text":"Low Level Rhythm Tonal SFX lowlevel_average_loudness rhythm_first_peak_bpm tonal_hpcp_entropy sfx_temporal_decrease lowlevel_barkbands rhythm_onset_times tonal_chords_scale sfx_inharmonicity lowlevel_barkbands_kurtosis rhythm_beats_count tonal_chords_number_rate sfx_pitch_min_to_total lowlevel_barkbands_skewness rhythm_beats_loudness tonal_key_strength sfx_tc_to_total lowlevel_barkbands_spread rhythm_first_peak_spread tonal_chords_progression sfx_der_av_after_max lowlevel_dissonance rhythm_second_peak_weight tonal_key_scale sfx_pitch_max_to_total lowlevel_erb_bands rhythm_bpm tonal_chords_strength sfx_temporal_spread lowlevel_frequency_bands rhythm_bpm_intervals tonal_key_key sfx_temporal_kurtosis lowlevel_gfcc rhythm_onset_count tonal_chords_changes_rate sfx_logattacktime lowlevel_hfc rhythm_second_peak_spread tonal_chords_count sfx_temporal_centroid lowlevel_mfcc rhythm_beats_loudness_band_ratio tonal_hpcp_crest sfx_tristimulus lowlevel_pitch rhythm_second_peak_bpm tonal_chords_histogram sfx_max_der_before_max lowlevel_pitch_instantaneous_confidence rhythm_onset_rate tonal_chords_key sfx_strongdecay lowlevel_pitch_salience rhythm_beats_position tonal_tuning_frequency sfx_pitch_centroid lowlevel_scvalleys rhythm_first_peak_weight tonal_hpcp_peak_count sfx_duration lowlevel_silence_rate_20db tonal_hpcp sfx_temporal_skewness lowlevel_silence_rate_30db sfx_effective_duration lowlevel_silence_rate_60db sfx_max_to_total lowlevel_spectral_centroid sfx_oddtoevenharmonicenergyratio lowlevel_spectral_complexity sfx_pitch_after_max_to_before_max_energy_ratio lowlevel_spectral_contrast lowlevel_spectral_crest lowlevel_spectral_decrease lowlevel_spectral_energy lowlevel_spectral_energyband_high lowlevel_spectral_energyband_low lowlevel_spectral_energyband_middle_high lowlevel_spectral_energyband_middle_low lowlevel_spectral_entropy lowlevel_spectral_flatness_db lowlevel_spectral_flux lowlevel_spectral_kurtosis lowlevel_spectral_rms lowlevel_spectral_rolloff lowlevel_spectral_skewness lowlevel_spectral_spread lowlevel_spectral_strongpeak lowlevel_start_frame lowlevel_stop_frame lowlevel_zerocrossingrate"},{"location":"appendix/fields-list/","title":"Fields","text":"<p>id and name are always included when performing a <code>FreeSoundClient.search()</code></p> Fields ac_analysis analysis analysis_frames analysis_stats avg_rating bitdepth bitrate bookmarks bookmark channels comment comments created description download duration filesize geotag id images is_explicit license name num_comments num_downloads num_ratings pack pack_name previews rate samplerate similar_sounds tags type url username"},{"location":"appendix/filters-list/","title":"Filters","text":"Freesound Audio Commons avg_rating ac_boominess bitdepth ac_brightness bitrate ac_depth channels ac_dynamical_range created ac_hardness description ac_log_attack_time duration ac_loop filesize ac_loudness id ac_note_confidence is_geotagged ac_note_frequency is_remix ac_note_midi license ac_note_name md5 ac_reverb num_comments ac_roughness num_downloads ac_sharpness original_filename ac_single_event pack ac_tempo pack_tokenized ac_tempo_confidence samplerate ac_temporal_centroid tag ac_tonality type ac_tonality_confidence username ac_warmth was_remixed"},{"location":"appendix/missing-features/","title":"Missing Features","text":"<p>As for now this is the list of missing features:</p> <ul> <li>Geotagging</li> <li>Filters Range</li> <li>Conditional Queries</li> </ul> <p>Please feel free to contribute or request additional features opening a new feature request on Github</p>"},{"location":"tutorials/tutorial-basics/","title":"Getting started","text":"<p>Welcome to the FreeSoundClient Tutorial! This part of the documentation follows a step-by-step approach to help you get started with the basic functionalities of the <code>FreeSoundClient</code>.</p> <p>INFO you can find the source code of the final version of this tutorial on GitHub</p>","boost":2},{"location":"tutorials/tutorial-basics/#before-you-start","title":"Before you start","text":"<p>In order to use this software you need an account on freesound.org and apply for an API key following this link https://freesound.org/apiv2/apply/. The form is quite straight forward: in the Create new API credentials you must give a name and a description to your key, accept the terms of use and click on Request new access credentials</p> <p>Please save your credentials in you project folder (either in a <code>.env</code> file or a <code>credentials.txt</code> file)</p>","boost":2},{"location":"tutorials/tutorial-basics/#get-started","title":"Get started","text":"<p>After downloading the repository, create a project folder and copy the <code>freesound</code> folder into it and create a new empty file called <code>main.py</code>. Your project directory should look like this: <pre><code>.\n\u251c\u2500\u2500 freesound\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 filter_types.py\n\u2502   \u251c\u2500\u2500 formatting.py\n\u2502   \u251c\u2500\u2500 freesound_api.py\n\u2502   \u251c\u2500\u2500 freesound_client.py\n\u2502   \u251c\u2500\u2500 freesound_descriptors.py\n\u2502   \u251c\u2500\u2500 freesound_errors.py\n\u2502   \u251c\u2500\u2500 freesound_fields.py\n\u2502   \u251c\u2500\u2500 freesound_filters.py\n\u2502   \u251c\u2500\u2500 freesound_list_maker.py\n\u2502   \u251c\u2500\u2500 freesound_requests.py\n\u2502   \u2514\u2500\u2500 freesound_sound.py\n\u2514\u2500\u2500  main.py\n</code></pre> Now open <code>main.py</code> and import the <code>freesound</code> library  <pre><code>from freesound import *\n</code></pre> Then create two global variables to store your API Credentials <pre><code>API_KEY=&lt;your-api-key&gt;\nUSER_ID=&lt;your-user-id&gt;\n</code></pre> and create an instance of the <code>FreeSoundClient</code> <pre><code>c = FreeSoundClient(USER_ID,API_KEY)\n</code></pre></p>","boost":2},{"location":"tutorials/tutorial-basics/#your-first-access","title":"Your first access","text":"<p>Now run your program: <pre><code>python main.py\n</code></pre> If this is your first time that you use the <code>freesound-client</code> library when you run this program you will get the following output:</p> Output <pre><code>No access token file found. Authorizing...\n==================================================\nVisit this page to authorize your user: https://freesound.org/apiv2/oauth2/authorize/?client_id=&lt;your-client-id&gt;&amp;response_type=code&amp;state=xyz \nEnter the authorization code from the redirect URL: \n</code></pre> <p>All the requests made by the <code>FreeSoundClient</code> use the OAuth2 authentication protocol, so the application needs an access token from the API to get access to the database.</p> <p>If you follow the link posted in your terminal a browser page will display the following information:</p> click to enlarge <p>Where app-name will be the name of the name value that you provided when applying for the API credentials. Copy <code>&lt;the-authorization-code-to-copy&gt;</code> (an alphanumeric string) and paste it into the terminal:</p> Output <pre><code>Enter the authorization code from the redirect URL: &lt;the-authorization-code-to-copy&gt;\nhttps://freesound.org/apiv2/oauth2/access_token/\nAuthorization succeded!\nGetting Client Info\nhttps://freesound.org/apiv2/me/\nFreeSound Client &lt;your-username&gt; Initialized\n</code></pre> <p>You are now granted to access the Freesound database.</p> <p>This process will create a file called <code>access_token.json</code> where your access token's data will be stored.  <pre><code>\u251c\u2500\u2500 access_token.json\n\u251c\u2500\u2500 freesound\n\u2514\u2500\u2500 main.py\n</code></pre></p> <p>Note: If you delete this file the <code>FreeSoundClient</code> will simply repeat this authorization process and create a new <code>access_token.json</code> file for you</p>","boost":2},{"location":"tutorials/tutorial-basics/#your-first-search","title":"Your first <code>search</code>","text":"<p>Now that your client is authorized to query the Freesound Database let's make a simple research: <pre><code>from freesound import *\n\nAPI_KEY = \"&lt;your-api-key&gt;\"\nUSER_ID = \"&lt;your-user-id&gt;\"\n\nc = FreeSoundClient(USER_ID,API_KEY)\nc.search(query=\"piano detuned\")\n</code></pre> The <code>query</code> attribute needs a space-separated string of words that you want to search into the Freesound Database. Running this program will produce the following output:</p> Output <pre><code>Loading token from file\n________________\nGetting Client Info\nhttps://freesound.org/apiv2/me/\nFreeSound Client &lt;your-username&gt; Initialized\n________________\nSearching for piano detuned\nhttps://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2C&amp;page_size=15&amp;sort=score&amp;normalized=0\nFound 469 results\n</code></pre> <p>Because you already have an <code>access_token.json</code> the client will inform you that it is <code>Loading token from file</code> and then will perform the <code>search</code>.</p> <p>With this research you got <code>469 results</code> which are stored into the memory of the <code>FreeSoundClient</code>.</p> <p>The client will also print the url generated by the <code>search</code> request. If you copy this url and paste it into a browser you should see the actual result of your reasearch (you must be logged in to see this result otherwise you will get an <code>HTTP 401 Unauthorized</code> response).</p> <p>NOTICE: if you visit the url you will see a list of only 15 of the 469 results. You will understand why in the next paragraph.</p>","boost":2},{"location":"tutorials/tutorial-basics/#printing-data-from-the-result","title":"Printing data from the <code>result</code>","text":"<p>By default, when performing a <code>search</code> the <code>FreeSoundClient</code> will get a <code>dictionary</code> that contains a parsed response from the server. Let's print it using the FreeSoundClient.results_list attribute: <pre><code>print(c.results_list)\n</code></pre></p> Output <pre><code>{\n\"results\": [\n    {\n    \"id\": 30274,\n    \"name\": \"piano_impression1.aif\"\n    },\n    {\n    \"id\": 382508,\n    \"name\": \"Piano 16 F4.wav\"\n    },\n    {\n    \"id\": 382532,\n    \"name\": \"Piano 45 G#5.wav\"\n    },\n    {\n    \"id\": 382541,\n    \"name\": \"Piano 57 G#6.wav\"\n    },\n    {\n    \"id\": 382539,\n    \"name\": \"Piano 59 A6.wav\"\n    },\n    {\n    \"id\": 382533,\n    \"name\": \"Piano 46 A5.wav\"\n    },\n    {\n    \"id\": 382510,\n    \"name\": \"Piano 20 G4.wav\"\n    },\n    {\n    \"id\": 382546,\n    \"name\": \"Piano 52 C#6.wav\"\n    },\n    {\n    \"id\": 382484,\n    \"name\": \"Piano 23 A4.wav\"\n    },\n    {\n    \"id\": 382504,\n    \"name\": \"Piano 12 D#4.wav\"\n    },\n    {\n    \"id\": 382505,\n    \"name\": \"Piano 11 D#4.wav\"\n    },\n    {\n    \"id\": 382511,\n    \"name\": \"Piano 19 G4.wav\"\n    },\n    {\n    \"id\": 382502,\n    \"name\": \"Piano 14 E4.wav\"\n    },\n    {\n    \"id\": 382531,\n    \"name\": \"Piano 44 G5.wav\"\n    },\n    {\n    \"id\": 382486,\n    \"name\": \"Piano 21 G4.wav\"\n    }\n],\n\"timestamp\": \"2024-03-01T12:30:02.984110\",\n\"count\": 469\n}\n</code></pre> <p>The response from the server is paginated which means that even if the client found 469 sound files that match your query (<code>\"piano detuned\"</code>) you will only see a list of 15 files.</p> <p>In this <code>dictionary</code> there are 3 keys:</p> <ul> <li><code>search-results</code>: a <code>list</code> containing data about the first 15 sound files matching the query.</li> <li><code>timestamp</code>: when the request has been submitted</li> <li><code>count</code> the total number of sound files found</li> </ul> <p>Another way to print the result of a <code>search</code> request is to use the <code>FreeSound.dump_results()</code> method, a utility function that will just print a more human-readable version of <code>c.results_list</code>. Adding:  <pre><code>c.dump_results()\n</code></pre> to your <code>main.py</code> will produce the following output</p> Output <pre><code>Found 469 results\n________________\nid:30274\nname:piano_impression1.aif\n________________\nid:382530\nname:Piano 43 F#5.wav\n________________\n...\n</code></pre> <p>Notice that in both cases the only information about the sound files that you collected from the database are <code>id</code> and <code>name</code></p>","boost":2},{"location":"tutorials/tutorial-basics/#download-your-search-results","title":"Download your <code>search</code> results","text":"<p>Downloading files from a <code>search</code> result it is pretty straight forward using the method <code>FreeSoundClient.download_results()</code>. Add: <pre><code>c.download_results()\n</code></pre> to your <code>main.py</code></p> <p>At this point you will be prompted with a few questions: <pre><code>How many files do you want to download? [a number | all] \n</code></pre> Let's set this value to <code>3</code>. Then you need to specify the folder where the sound files will be downloaded: <pre><code>Please set an output folder: \n</code></pre> Press enter to download the files in your project directory</p> Output <pre><code>Attribute 'download' not found! Please include the 'download' keyword in your fields' search list and retry\nLogging out\n</code></pre> <p>There is an <code>Exception</code>! The reason is simple: when querying the database the <code>FreeSoundClient</code> did not retrieve the <code>download</code> link associated with the sound files but only their <code>id</code>s and <code>name</code>s. You need to modify your search parameters. Go back to the line where you call the <code>c.search()</code> and modify it as follows: <pre><code>c.search(query=\"piano detuned\",fields=\"download\")\n</code></pre> The attribute <code>fields</code> is a feature that allows you to specify which attribute associate with a sound file should be included in the search results. In this case adding the keyword <code>download</code> will include the download link from which the <code>FreeSoundClient</code> will be then able to find and download the actual sound files. The url resulting of this query is now: <pre><code>https://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2Cdownload&amp;page_size=15&amp;sort=score&amp;normalized=0\n</code></pre></p> <p>Notice how the url generated by the search request now includes the <code>download</code> keyword in the 'fields' parameter</p> <p>and <code>c.dump_results()</code> will produce</p> Output <pre><code>________________\nid:30274\nname:piano_impression1.aif\ndownload:https://freesound.org/apiv2/sounds/30274/download/\n________________\nid:382530\nname:Piano 43 F#5.wav\ndownload:https://freesound.org/apiv2/sounds/382530/download/\n________________\nid:382535\n...\n</code></pre> <p>The download link is now available and <code>c.download_results()</code>should work as expected</p> Output <pre><code>How many files do you want to download? [a number | all] 3\nPlease set an output folder:  \nDownloading 3 files of 469\n________________\npiano_impression1.aif\nDownloading piano_impression1.aif\nhttps://freesound.org/apiv2/sounds/30274/download/\nDownloaded Files: 1 of 3\n________________\nPiano-43-F#5.wav\nDownloading Piano-43-F#5.wav\nhttps://freesound.org/apiv2/sounds/382530/download/\nDownloaded Files: 2 of 3\n________________\n...\n</code></pre> <p>You can now find these files in your project folder. When prompted, feel free to specify another <code>folder</code> either using an absolute or a relative path. You can avoid being prompted by adding the <code>output_folder_path</code> and the <code>files_count</code> arguments to <code>c.download_results()</code>: <pre><code>c.download_results(\"sounds\", 3)\n</code></pre> This instruction will create the folder <code>sounds</code> inside your project folder and download 3 files from the <code>search</code> result into it.</p>","boost":2},{"location":"tutorials/tutorial-basics/#conclusions","title":"Conclusions","text":"<p>This tutorial allowed you to learn how to set up a simple project using the <code>freesound-client</code> library. </p> <p>In the next section you will learn the basics of the Freesound API and how to take full advantage of this library. </p>","boost":2},{"location":"tutorials/tutorial-freesound/","title":"How does the Freesound API works","text":"<p>Now that you know how to set up a basic script to work with the <code>FreeSoundClient</code> let's focus on how to take full advantage of the Freesound API.</p> <p>NOTICE: The Freesound API is very well documented. Please don't forget that you can always rely on the Official Freesound API Documentation</p> <p>INFO you can find the source code of the final version of this tutorial on GitHub</p>","boost":2},{"location":"tutorials/tutorial-freesound/#the-search-attributes","title":"The search attributes","text":"<p>Querying the Freesound Database is the most important task of this library and understand how to build the right queries for your needs is in turn the most important thing to learn.</p> <p>Let's review our first query: <pre><code>from freesound import *\n\nUSER_ID = \"&lt;your-user-id&gt;\"\nAPI_KEY = \"&lt;your-api-key&gt;\"\n\nc = FreeSoundClient(USER_ID,API_KEY)\nc.search(query=\"piano detuned\")\n</code></pre> Behind the scene <code>search</code> performs a <code>GET</code> request at the following url: <pre><code>https://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2C&amp;page_size=15&amp;sort=score&amp;normalized=0\n</code></pre> There are many things specified in this url so let's break it down: <pre><code>https://freesound.org/apiv2/search/text/\n</code></pre> is the actual address that you want to reach, and it is the one that users use to perform text-based researches.</p> <p>Starting from <code>?</code> there is a list of url parameters that you pass to the request:</p> <ul> <li><code>query=piano+detuned</code> </li> <li><code>fields=id%2Cname%2C</code> </li> <li><code>page_size=15</code></li> <li><code>sort=score</code></li> <li><code>normalized=0</code></li> </ul> <p>The parameter <code>query</code> stores the text that you want to search in the database. You can use as many search keywords as you want. Just separate them with a space, and they will be automatically encoded with a <code>+</code> sign.</p> <p><code>fields</code> is the parameter which allows you to specify which information you want to retrieve from the database about a sound file. By default, the <code>FreeSoundClient</code> will always ask for the <code>id</code> and the <code>name</code>, but as you saw in the last tutorial, you can request other fields, such as <code>download</code>. There are many <code>fields</code> available for each sound instance, and you will see how to take advantage of this parameter in the next paragraphs.</p> <p><code>page_size</code> allows you to define how many results should be included in one request page (which is 15 by default). If you are planning to work with a higher number of sound files you should use a higher value for this parameter (max 150).</p> <p>The parameter <code>sort</code>, by definition, will tell the database how the results should be sorted.</p> <p><code>normalization</code> is a feature that only applies when you include audio <code>descriptors</code> in your request. More about this in the next paragraphs.</p>","boost":2},{"location":"tutorials/tutorial-freesound/#filter-your-search","title":"Filter your <code>search</code>","text":"<p>One of the most important feature when performing a <code>search</code> request is the ability to filter out results that do not comply with your needs. </p> <p>Let's make an example: for a specific project you need to collect only <code>wav</code> files with a 16bit resolution and sampled at 48000. To achieve this you can use another object provided by this library: the <code>FreeSoundFilters</code>, a utility class that helps you to format a list of filters for a valid request. <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16)\nc.search(query=\"piano detuned\", filter=filters.aslist)\n</code></pre> This call will produce the following output:</p> Output <pre><code>Searching for piano detuned\nhttps://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2C&amp;page_size=15&amp;sort=score&amp;normalized=0&amp;filter=type%3Awav+samplerate%3A44100+bitdepth%3A16\nFound 256 results\n</code></pre> <p>With the same search keywords your query found <code>256 results</code> instead of 469.</p> <p>The resulting url changed, and it now includes the <code>filter</code> parameter: <pre><code>filter=type%3Awav+samplerate%3A44100+bitdepth%3A16\n</code></pre> Which decoded becomes: <pre><code>filter=type:wav samplerate:44100 bitdepth:16\n</code></pre> And this is exactly what the <code>FreeSoundFilters</code> does. Other than provide hints for valid filters, </p> click to enlarge <p>this class and its method <code>aslist</code>, will format this list for you: <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16)\nprint(filters.aslist)\n</code></pre></p> Output <pre><code>type:wav samplerate:44100 bitdepth:16\n</code></pre> <p>Sound files can also be filtered by one or multiple attributes, such as <code>tag</code>, and you might want to add a filter to get only sounds with specific tags. In such a scenario, instead of specifying a string as a value for <code>tag</code>, you can use a <code>list</code> like follows: <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16, tag=['detuned','prepared'])\nprint(filters.aslist)\n</code></pre> The list will be expanded as follows</p> Output <pre><code>type:wav samplerate:44100 bitdepth:16 tag:detuned tag:prepared\n</code></pre> <p>a valid string for your query. With the additional <code>tag</code> filter your search result will contain 233 sounds</p> Output <pre><code>Searching for piano detuned\nhttps://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2Ctags&amp;page_size=15&amp;sort=score&amp;normalized=0&amp;filter=type%3Awav+samplerate%3A44100+bitdepth%3A16+tag%3Aprepared+tag%3Adetuned\nFound 233 results\n</code></pre> <p>Filters allow ranges and conditional statementsCheck the dedicated section in the How To page</p>","boost":2},{"location":"tutorials/tutorial-freesound/#getting-analysis-data","title":"Getting analysis data","text":"<p>One of the most powerful feature of the Freesound API is the possibility to retrieve low level analysis data of each sound. There are two steps to achieve this: first you should add the <code>analysis</code> field to your <code>fields</code> parameter: <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16,tag=['prepared','detuned'])\nc.search(query=\"piano detuned\", fields=\"analysis\", filter=filters.aslist)\n</code></pre> and then use the <code>descriptors</code> parameter to define which features should be retrieved from the server <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16,tag=['prepared','detuned'])\ndesc = FreeSoundDescriptors([Descriptor.lowlevel_average_loudness,Descriptor.lowlevel_dissonance])\nc.search(query=\"piano detuned\", fields=\"analysis\", filter=filters.aslist, descriptors=desc.aslist)\n</code></pre> As for the filters, here you are using the <code>FreeSoundDescriptors</code> a utility class that from a <code>list</code> of <code>Descriptor</code> will help you to format a valid list of descriptors to query the database.</p> <p>This request will be forwarded to the following url: <pre><code>https://freesound.org/apiv2/search/text/?query=piano+detuned&amp;fields=id%2Cname%2Canalysis&amp;page_size=15&amp;sort=score&amp;normalized=0&amp;filter=type%3Awav+samplerate%3A44100+bitdepth%3A16+tag%3Aprepared+tag%3Adetuned&amp;descriptors=lowlevel.average_loudness%2Clowlevel.dissonance\n</code></pre> which includes the <code>descriptors</code> parameter: <pre><code>descriptors=lowlevel.average_loudness%2Clowlevel.dissonance\n</code></pre> which decoded results in: <pre><code>descriptors=lowlevel.average_loudness,lowlevel.dissonance\n</code></pre> which is exactly what the <code>FreeSoundDescriptors.aslist</code> method does: <pre><code>desc = FreeSoundDescriptors([Descriptor.lowlevel_average_loudness,Descriptor.lowlevel_dissonance])\nprint(desc.aslist)\n</code></pre></p> Output <pre><code>lowlevel.average_loudness,lowlevel.dissonance\n</code></pre> <p>The class <code>Descriptor</code> will provide you with hints to select a valid Freesound descriptor</p> click to enlarge <p>Now print the full response of your <code>search</code> request. Add <code>c.dump_results()</code> at the end of your script: <pre><code>c.dump_results()\n</code></pre></p> Output <pre><code>Found 233 results\n--------------------\nid:382539\nname:Piano 59 A6.wav\nanalysis:\n  average_loudness:0.0001156733164443101\n  dissonance:\n    min:0.41471666016070136\n    max:0.49807483306121003\n    dvar2:0.0003639381383530018\n    dmean2:0.01738614605182347\n    dmean:0.01092408269803247\n    var:0.00020994146275491086\n    dvar:0.0001980157397133761\n    mean:0.48211296868812625\n--------------------\nid:382533\nname:Piano 46 A5.wav\nanalysis:\n  average_loudness:2.3593042398314997e-07\n  dissonance:\n    min:0.0\n    max:0.4992182563553003\n    dvar2:0.0072741507223403855\n    dmean2:0.09399208175807922\n    dmean:0.0588165176322519\n    var:0.005893807680049213\n    dvar:0.003078075759614881\n    mean:0.38633684975614424\n--------------------\nid:382510\nname:Piano 20 G4.wav\nanalysis:\n  average_loudness:0.00035443490551525787\n  dissonance:\n    min:0.09704220532826434\n    max:0.4688467280334164\n    dvar2:0.004038197436062609\n    dmean2:0.06455182028183501\n    dmean:0.03937605841764635\n    var:0.007301079374823115\n    dvar:0.001507330795200205\n    mean:0.2609139747182671\n--------------------\n12 RESULTS OMITTED\n--------------------\ntimestamp:2024-03-01T17:49:18.541707\n\ncount:233\n</code></pre> <p>While the resulting <code>avarage_loudness</code> of each file is one value the <code>dissonance</code> is presented as a <code>dict</code> of values containing statics of the <code>dissonance</code> which is performed frame by frame.</p> <p>NOTICE: The official Freesound Analysis Documentation states: the analysis sample rate is 44100Hz and the audio file\u2019s channels are mixed down to mono. For the lowlevel namespace the frame size is 2048 samples with a hop size of 1024, while for the tonal namespace the frame size is 4096 and the hop size 2048.</p>","boost":2},{"location":"tutorials/tutorial-freesound/#requesting-multiple-fields","title":"Requesting multiple fields","text":"<p>If you know want to download the resulting sound, but you still want to get the analysis data of your sounds, you know that you should add the <code>download</code> keyword to the <code>fields</code> search parameter. The url parameter <code>fields</code> that you encoded in your last query is: <pre><code>fields=id%2Cname%2Canalysis\n</code></pre> which decoded is: <pre><code>fields=id,name,analysis\n</code></pre> a coma-separated string of values. Since <code>id</code> and <code>name</code> are always included in the <code>fields</code> of each <code>FreeSoundClient.search()</code> request, you just needed to add the <code>analysis</code> field to retrieve the low level descriptors from the database. To add the <code>download</code> field and retrieve the sound file download url from the server, you can reformulate the <code>search</code> request as follows: <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16, tag=['prepared','detuned'])\ndesc = FreeSoundDescriptors([Descriptor.lowlevel_average_loudness,Descriptor.lowlevel_dissonance])\nfields = FreeSoundFields([Field.analysis, Field.download])\nc.search(query=\"piano detuned\", fields=fields.aslist, filter=filters.aslist, descriptors=desc.aslist)\n</code></pre> As for the <code>descriptors</code> the <code>FreeSoundFields</code> utility class will assist you to formulate a valid coma-separated string of fields to be included in your search result. <pre><code>fields = FreeSoundFields([Field.analysis, Field.download])\nprint(fields.aslist)\n</code></pre> will result in</p> Output <pre><code>analysis,download\n</code></pre> <p>which are the fields that will be appended to <code>id,name</code>. Like the class <code>Descriptor</code>, <code>Field</code> will provide you with hints to choose valid fields for you requests</p> click to enlarge <p>If you find yourself in the need of retrieve as much information as possible from a search query, <code>Field</code> has a special method called <code>all()</code>, which, by definition, will allow you to query all the fields of a sound in one search result. <pre><code>c.search(query=\"piano detuned\", fields=Field.all(), filter=filters.aslist, descriptors=desc.aslist)\n</code></pre></p> Output <pre><code>Found 233 results\n--------------------\nid:382539\nurl:https://freesound.org/people/lomographicmusic/sounds/382539/\nname:Piano 59 A6.wav\ntags:['piano', 'detuned', 'prepared']\ndescription:Simple detuned piano sound recorded with Tascam DP008. \n\nSon de piano d\u00e9tun\u00e9 capt\u00e9 au fantastique Tascam DP008.\ngeotag:None\ncreated:2017-03-01T00:35:20\nlicense:https://creativecommons.org/licenses/by/4.0/\ntype:wav\nchannels:2\nfilesize:321032\nbitrate:0\nbitdepth:16\nduration:1.81966\nsamplerate:44100.0\nusername:lomographicmusic\npack:https://freesound.org/apiv2/packs/21508/\ndownload:https://freesound.org/apiv2/sounds/382539/download/\npreviews:\nimages:\nnum_downloads:43\navg_rating:0.0\nnum_ratings:0\nrate:https://freesound.org/apiv2/sounds/382539/rate/\ncomments:https://freesound.org/apiv2/sounds/382539/comments/\nnum_comments:0\ncomment:https://freesound.org/apiv2/sounds/382539/comment/\nsimilar_sounds:https://freesound.org/apiv2/sounds/382539/similar/\nanalysis:\n  average_loudness:0.0001156733164443101\n  dissonance:\n    min:0.41471666016070136\n    max:0.49807483306121003\n    dvar2:0.0003639381383530018\n    dmean2:0.01738614605182347\n    dmean:0.01092408269803247\n    var:0.00020994146275491086\n    dvar:0.0001980157397133761\n    mean:0.48211296868812625\nanalysis_frames:https://freesound.org/data/analysis/382/382539-fs-essentia-extractor_legacy_frames.json\nanalysis_stats:https://freesound.org/apiv2/sounds/382539/analysis/\nac_analysis:\n--------------------\n14 RESULTS OMITTED\n--------------------\ntimestamp:2024-03-01T17:52:42.207937\n\ncount:233\n</code></pre>","boost":2},{"location":"tutorials/tutorial-freesound/#saving-the-analysis-data","title":"Saving the analysis data","text":"<p>You already know how to download audio files from the Freesound Database, but the <code>FreeSoundClient</code> allows you to store also the analysis results of your searches thanks to the method <code>FreeSoundClient.write_results_list</code>.  Calling <pre><code>c.write_results_list()\n</code></pre> The program will prompt to choose an output folder. Pressing the return key will create a file called <code>results_list.json</code> prefixed with a timestamp in the same folder as your script. Feel free to specify another <code>folder</code> either using an absolute or a relative path, and a <code>filename</code> (a time stamp will always be included). </p>","boost":2},{"location":"tutorials/tutorial-freesound/#other-possible-methodologies","title":"Other possible methodologies","text":"<p>All the utility classes presented in this tutorial have been developed to provide a user-friendly interface and help the users to focus on their goal without the need of visiting the official Documentation to formulate valid queries. But the <code>search</code> method does actually work without them. Nothing prevents the user to formulate this request using <code>strings</code>. Your last call to <code>search</code>: <pre><code>filters = FreeSoundFilters(type='wav',samplerate=44100,bitdepth=16,tag=['prepared','detuned'])\ndesc = FreeSoundDescriptors([Descriptor.lowlevel_average_loudness,Descriptor.lowlevel_dissonance])\nfields = FreeSoundFields([Field.analysis, Field.download])\nc.search(query=\"piano detuned\", fields=fields.aslist, filter=filters.aslist, descriptors=desc.aslist)\n</code></pre> can be in fact reformulated as follows: <pre><code>c.search(query=\"piano detuned\", fields=\"analysis,download\", filter=\"type:wav samplerate:44100 bitdepth:16 tag:prepared tag:detuned\", descriptors=\"lowlevel.average_loudness,lowlevel.dissonance\")\n</code></pre> or even combining the 2 methodologies.</p>","boost":2},{"location":"tutorials/tutorial-freesound/#conclusion","title":"Conclusion","text":"<p>You should now know have a good overview of all the basic features of the <code>freesound-client</code> library. In the Appendix section of this Documentation you can find the lists of all the valid parameters that can be used in search queries. Remember that the official Freesound API Documentation should be the most important resource to dive deeper in what the Freesound Database has to offer.</p> <p>Feel free to visit the How To page for a more problem oriented guide and for more advanced topic on how to use the <code>freesound-client</code> library.</p> <p></p>","boost":2}]}